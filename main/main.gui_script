local constants = require "main.constants"

function init(self)
	self.lives = 3
	self.shovels = { lives_2 = "shovel_2", lives_1 = "shovel_3" }
	self.score = 0
	self.score_node = gui.get_node("score")
	self.current_age = constants.AGES[constants.CURRENT_AGE]
	msg.post(".", "acquire_input_focus")
end

function on_message(self, message_id, message, sender)
	if message_id == hash("add_score") then
		local amount = message.amount
		print("player receives "..amount.." points")
		local s = 1.2
		self.score = self.score + amount
		gui.set_text(self.score_node, string.format("%06d",self.score))
		gui.animate(self.score_node, gui.PROP_SCALE, vmath.vector4(s, s, s, 0), gui.EASING_OUT, 0.1, 0.0, scale_down)
		if self.score >= self.current_age.minimal_point and self.current_age.next ~= "" then
			msg.post(self.current_age.stop_ground, "update_status", { status = false })
			msg.post(self.current_age.start_ground, "update_status", { status = true })

			print("change age to "..self.current_age.next)
			self.current_age = constants.AGES[self.current_age.next]
			msg.post(
				"main:/factory#factory", 
				"change_age", 
				{ damage_object = self.current_age.damage_object, 
				point_object = self.current_age.point_object,
				speed = self.current_age.speed}
			)
		end
	elseif message_id == hash("hit") then
		local damage = message.damage
		self.lives = self.lives - damage
		print("shovel receives "..damage.." damages, current count of lives "..self.lives)
		if self.lives > 0 then
			local shovel_sprite_id = self.shovels["lives_"..self.lives]
			msg.post("/shovel#shovel_sprite", "play_animation", {id = hash(shovel_sprite_id)})
			return
		end
		msg.post("gameover#gui", "gameover", {score = self.score})
		msg.post(self.current_age.stop_ground, "gameover")
		msg.post("main:/shovel#shovel", "gameover")
		msg.post("background#sprite", "disable")
		msg.post("default:/main#roots", "gameover")
	end
end